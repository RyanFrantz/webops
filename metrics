#!/bin/bash

#
# metrics - Generate metrics for Graphite, via StatsD
#

# Assumptions around dates and times:
# 1. We're running on a host that tells time in UTC.
# 2. We have GNU `date`.
# 3. This script runs minutely.

# Write to stderr.
_stderr () {
  # ISO8601 timestamp, precision in seconds.
  local _now
  _now=$(date -Iseconds)
  >&2 echo "{\"time_iso8601\": \"${_now}\" \"msg\": \"$*\"}"
}

# Given a percentile target and an array of values, returns the value found at
# that percentile.
percentile() {
  local target values sorted count idx
  # Sort all values in ascending order.
  target=$1
  shift # Pop the first arg off the stack...
  values=("$@") # ...and assign the remainder to an array.
  # NOTE: [*] expands to a single word. This is different than [@] which expands
  # each element as a separate word. Using [*] and IFS set to a newline, we can
  # iterate over the array values as if they were a set of lines, so that
  # `sort` can do its thing.
  IFS=$'\n' sorted=( $(sort -n <<<"${values[*]}") ); unset IFS
  count="${#sorted[@]}"
  # NOTE: printf rounds to the nearest even number when a decimal is halfway
  # between integers.
  # $ printf "%.0f\n" 67.5 -> 68
  # $ printf "%.0f\n" 66.5 -> 66
  # While not related to printf, this bit of documented behavior in gawk helped
  # me:
  # https://www.gnu.org/software/gawk/manual/html_node/\
  # Setting-the-rounding-mode.html#Setting-the-Rounding-Mode
  idx=$(printf "%0.f" $(echo "scale=1; ($count * $target) / 100" | bc))
  idx=$(( idx - 1 )) # bash arrays are zero-based
  echo "${sorted[$idx]}"
}

DB_FILE="/var/lib/ops/logs.db"
TABLE_NAME="logs"

# Test if we're receiving piped input (assumes its an epoch value).
# If not, set the epoch to "now".
if [ -p /dev/stdin ]; then
  _stdin=$(cat)
  read -r EPOCH < <(echo "${_stdin}")
else
  EPOCH="$(date +%s)"
fi

# If the piped input was 0, there is nothing to process.
# If the piped input was empty, something is wrong.
if [ "${EPOCH}" = "0" -o "${EPOCH}" = "" ]; then
  _stderr "Nothing to process"
  exit 0
fi

# Locate all requests for today.
# TODO: Extract request_method.
read -r -d '' SELECT_STMT <<- END_SELECT
  SELECT
    JSON_EXTRACT(json, '$.status'),
    JSON_EXTRACT(json, '$.uri'),
    JSON_EXTRACT(json, '$.request_time'),
    JSON_EXTRACT(json, '$.request_length'),
    JSON_EXTRACT(json, '$.bytes_sent')
  FROM ${TABLE_NAME}
  WHERE epoch >= ${EPOCH}
END_SELECT

readarray -t REQS \
        < <(echo "${SELECT_STMT}" \
        | sqlite3 "${DB_FILE}")

declare -A REQ_COUNTERS
declare -a REQ_TIME REQ_LENGTH BYTES_SENT
for request in "${REQS[@]}"; do
  # sqlite3 will use a pipe as a delimiter
  IFS=\| read status uri request_time request_length bytes_sent <<<$( \
    echo $request)
  hit="false"
  if [[ "${uri}" =~ ^/hit/ ]]; then
    hit="true"
  fi
  key="http.requests.status.${status}"
  blog_hit="blog.hit.${hit}"
  REQ_TIME+=("${request_time}")
  REQ_LENGTH+=("${request_length}")
  BYTES_SENT+=("${bytes_sent}")

  if [ -z "${REQ_COUNTERS[${key}]}" ]; then
    # First time we've seen this key.
    REQ_COUNTERS["${key}"]=1
  else
    REQ_COUNTERS["${key}"]=$(( ${REQ_COUNTERS["${key}"]} + 1 ))
  fi

  if [ -z "${REQ_COUNTERS[${blog_hit}]}" ]; then
    # First time we've seen this key.
    REQ_COUNTERS["${blog_hit}"]=1
  else
    REQ_COUNTERS["${blog_hit}"]=$(( ${REQ_COUNTERS["${blog_hit}"]} + 1 ))
  fi
done

# echo "test.deploys.foo:2|c" | nc -w 1 -u 127.0.0.1 8125
for key in "${!REQ_COUNTERS[@]}"; do
  printf "%s:%s|c\n" "${key}" "${REQ_COUNTERS[$key]}" | \
    nc -u 127.0.0.1 8125
done

perc95_req_time=$(percentile 95 "${REQ_TIME[@]}")
perc99_req_time=$(percentile 99 "${REQ_TIME[@]}")
max_req_time=$(percentile 100 "${REQ_TIME[@]}") # MAX
echo "http.requests.duration_seconds.p95:${perc95_req_time}|c" | \
  nc -u 127.0.0.1 8125
echo "http.requests.duration_seconds.p99:${perc99_req_time}|c" | \
  nc -u 127.0.0.1 8125
echo "http.requests.duration_seconds.max:${max_req_time}|c" | \
  nc -u 127.0.0.1 8125

perc95_req_length=$(percentile 95 "${REQ_LENGTH[@]}")
perc99_req_length=$(percentile 99 "${REQ_LENGTH[@]}")
max_req_length=$(percentile 100 "${REQ_LENGTH[@]}") # MAX
echo "http.requests.length_bytes.p95:${perc95_req_length}|c" | \
  nc -u 127.0.0.1 8125
echo "http.requests.length_bytes.p99:${perc99_req_length}|c" | \
  nc -u 127.0.0.1 8125
echo "http.requests.length_bytes.max:${max_req_length}|c" | \
  nc -u 127.0.0.1 8125

perc95_bytes_sent=$(percentile 95 "${BYTES_SENT[@]}")
perc99_bytes_sent=$(percentile 99 "${BYTES_SENT[@]}")
max_bytes_sent=$(percentile 100 "${BYTES_SENT[@]}") # MAX
echo "http.bytes_sent.p95:${perc95_bytes_sent}|c" | \
  nc -u 127.0.0.1 8125
echo "http.bytes_sent.p99:${perc99_bytes_sent}|c" | \
  nc -u 127.0.0.1 8125
echo "http.bytes_sent.max:${max_bytes_sent}|c" | \
  nc -u 127.0.0.1 8125
