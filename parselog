#!/usr/local/bin/bash
# FIXME: Replace me with #!/bin/bash
# Thanks, Mac
#!/bin/bash

#
# parselog - Parse useful data from our structured nginx access log.
#

# Write to stderr.
_stderr () {
  # ISO8601 timestamp, precision in seconds.
  local _now
  _now=$(date -Iseconds)
  >&2 echo "{\"time_iso8601\": \"${_now}\" \"msg\": \"$*\"}"
}

# cat reads on stdin, by default, and outputs to stdout. We use that behavior to
# make this script accept piped and redirected output.
_stdin=$(cat)
readarray -t LOG_LINES < <(echo "${_stdin}")

FIRST_LINE="${LOG_LINES[0]}"
# If we only have a single line and its length is 0, we likely received no input.
if [[ "${#LOG_LINES[@]}" -eq "1" ]] && [[ "${#FIRST_LINE}" -eq "0" ]]; then
  _stderr "No input received"
  exit 0
fi

declare -A HTTP_STATUS # 2xx, 3xx, 4xx, etc.
declare -A URIS        # Counts for each requested URI
process_request () {
  local request
  request=$1
  local http_status
  # We need -e to properly set/detect exit status here.
  if ! http_status=$(jq --exit-status '.status' <<< "${request}" | tr -d '"'); then
    FAILED_PROCESSING=$(( FAILED_PROCESSING + 1 ))
    return
  fi
  # Count observed HTTP status codes.
  if [ -z "${HTTP_STATUS[${http_status}]}" ]; then
    # First time we've seen this status.
    HTTP_STATUS["${http_status}"]=1
  else
    HTTP_STATUS["${http_status}"]=$(( ${HTTP_STATUS["${http_status}"]} + 1 ))
  fi

  local request_uri
  if ! request_uri=$(jq --exit-status '.request_uri' <<< "${request}"); then
    FAILED_PROCESSING=$(( FAILED_PROCESSING + 1 ))
    return
  fi
  if [ -z "${URIS[${request_uri}]}" ]; then
    URIS["${request_uri}"]=1
  else
    URIS["${request_uri}"]=$(( ${URIS["${request_uri}"]} + 1 ))
  fi

  # We passed muster.
  PROCESSED_REQUESTS=$(( PROCESSED_REQUESTS + 1 ))
}

PROCESSED_REQUESTS=0
FAILED_PROCESSING=0
for LINE in "${LOG_LINES[@]}"; do
  # Test for JSONness.
  if jq -e '.' <<< "${LINE}" > /dev/null 2>&1; then
    process_request "${LINE}"
  else
    # Invalid input short-circuits immediately.
    FAILED_PROCESSING=$(( FAILED_PROCESSING + 1 ))
  fi
done

TOTAL_LINES="${#LOG_LINES[@]}"
echo "Found ${TOTAL_LINES} total log lines!"
echo "Processed: ${PROCESSED_REQUESTS}  Failed: ${FAILED_PROCESSING}"

echo -e "\t== HTTP Status Codes =="
for code in "${!HTTP_STATUS[@]}"; do
  printf "%s\tHTTP %s\n" "${HTTP_STATUS[$code]}" "${code}"
done | sort -rn

echo -e "\n\t== Request URIs =="
for uri in "${!URIS[@]}"; do
  printf "%s\t%s\n" "${URIS[$uri]}" "${uri}"
done | sort -rn

echo -e "\n\t== Request Rate =="
REQS_PER_SEC=$(echo "scale=2;${TOTAL_LINES}/60" | bc) # Assumes minutely runs.
echo "${REQS_PER_SEC} req/s"
